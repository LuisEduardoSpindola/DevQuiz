@page
@model DevQuiz.WEB.Questions.C_.IndexModel
@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <title>Vue Quiz</title>
    <style>
        @@import url("https://fonts.googleapis.com/css?family=Montserrat:400,400i,700");
        @@import url("https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700");

        .container{
              display: flex;
              justify-content: center;
              align-items: center;
              height: 100%;
              margin-top: 20px;
        }

        .button {
            transition: 0.3s;
        }

        .title, .subtitle {
            font-family: Montserrat, sans-serif;
            font-weight: normal;
        }

        .animated {
            transition-duration: 0.15s;
        }

        .questionBox {
            max-width: 30rem;
            width: 30rem;
            min-height: 30rem;
            background: #FAFAFA;
            position: relative;
            display: flex;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);
        }

            .questionBox header {
                background: rgba(0, 0, 0, 0.025);
                padding: 1.5rem;
                text-align: center;
                border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            }

                .questionBox header h1 {
                    font-weight: bold;
                    margin-bottom: 1rem !important;
                }



                .questionBox header .progressContainer {
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                }

                    .questionBox header .progressContainer > progress {
                        margin: 0;
                        border-radius: 5rem;
                        overflow: hidden;
                        border: none;
                        color: #3D5AFE;
                    }

                        .questionBox header .progressContainer > progress::-moz-progress-bar {
                            background: #3D5AFE;
                        }

                        .questionBox header .progressContainer > progress::-webkit-progress-value {
                            background: #3D5AFE;
                        }

                    .questionBox header .progressContainer > p {
                        margin: 0;
                        margin-top: 0.5rem;
                    }

            .questionBox .titleContainer {
                text-align: center;
                margin: 0 auto;
                padding: 1.5rem;
            }

            .questionBox .quizForm {
                display: block;
                white-space: normal;
                height: 100%;
                width: 100%;
            }

                .questionBox .quizForm .quizFormContainer {
                    height: 100%;
                    margin: 15px 18px;
                }

                    .questionBox .quizForm .quizFormContainer .field-label {
                        text-align: left;
                        margin-bottom: 0.5rem;
                    }

            .questionBox .quizCompleted {
                width: 100%;
                padding: 1rem;
                text-align: center;
            }

                .questionBox .quizCompleted > .icon {
                    color: #FF5252;
                    font-size: 5rem;
                }

                    .questionBox .quizCompleted > .icon .is-active {
                        color: #00E676;
                    }

            .questionBox .questionContainer {
                white-space: normal;
                height: 100%;
                width: 100%;
            }

                .questionBox .questionContainer .optionContainer {
                    margin-top: 12px;
                    flex-grow: 1;
                }

                    .questionBox .questionContainer .optionContainer .option {
                        border-radius: 290486px;
                        padding: 9px 18px;
                        margin: 0 18px;
                        margin-bottom: 12px;
                        transition: 0.3s;
                        cursor: pointer;
                        background-color: rgba(0, 0, 0, 0.05);
                        color: rgba(0, 0, 0, 0.85);
                        border: transparent 1px solid;
                    }

                        .questionBox .questionContainer .optionContainer .option.is-selected {
                            border-color: rgba(0, 0, 0, 0.25);
                            background-color: white;
                        }

                        .questionBox .questionContainer .optionContainer .option:hover {
                            background-color: rgba(0, 0, 0, 0.1);
                        }

                        .questionBox .questionContainer .optionContainer .option:active {
                            transform: scaleX(0.9);
                        }

                .questionBox .questionContainer .questionFooter {
                    background: rgba(0, 0, 0, 0.025);
                    border-top: 1px solid rgba(0, 0, 0, 0.1);
                    width: 100%;
                    align-self: flex-end;
                }

                    .questionBox .questionContainer .questionFooter .pagination {
                        margin: 15px 25px;
                    }

        .pagination {
            display: flex;
            justify-content: space-between;
        }

        .button {
            padding: 0.5rem 1rem;
            border: 1px solid rgba(0, 0, 0, 0.25);
            border-radius: 5rem;
            margin: 0 0.25rem;
            transition: 0.3s;
        }

            .button:hover {
                cursor: pointer;
                background: #ECEFF1;
                border-color: rgba(0, 0, 0, 0.25);
            }

            .button.is-active {
                background: #3D5AFE;
                color: white;
                border-color: transparent;
            }

                .button.is-active:hover {
                    background: #0a2ffe;
                }

        @@media screen and (min-width: 769px) {
            .questionBox {
                align-items: center;
                justify-content: center;
            }

                .questionBox .questionContainer {
                    display: flex;
                    flex-direction: column;
                }
        }

        @@media screen and (max-width: 768px) {
            .sidebar {
                height: auto !important;
                border-radius: 6px 6px 0px 0px;
            }
        }
    </style>
</head>
<body>
    <!--container-->
    <section class="container">
        <!--questionBox-->
        <div class="questionBox" id="app">
            <!-- transition -->
            <transition :duration="{ enter: 500, leave: 300 }" enter-active-class="animated zoomIn" leave-active-class="animated zoomOut" mode="out-in">
                <!--qusetionContainer-->
                <div class="questionContainer" v-if="questionIndex<quiz.questions.length" v-bind:key="questionIndex">
                    <header>
                        <h1 class="title is-6">C#/.NET Quiz</h1>
                        <!--progress-->
                        <div class="progressContainer">
                            <progress class="progress is-info is-small" :value="(questionIndex/quiz.questions.length)*100" max="100">{{(questionIndex/quiz.questions.length)*100}}%</progress>
                            <p>{{(questionIndex/quiz.questions.length)*100}}% complete</p>
                        </div>
                        <!--/progress-->
                    </header>

                    <!-- questionTitle -->
                    <h2 class="titleContainer title">{{ quiz.questions[questionIndex].text }}</h2>

                    <!-- quizOptions -->
                    <div class="optionContainer">
                        <div class="option" v-for="(response, index) in quiz.questions[questionIndex].responses" @@click="selectOption(index)" :class="{ 'is-selected': userResponses[questionIndex] == index}" :key="index">
                            {{ index | charIndex }}. {{ response.text }}
                        </div>
                    </div>

                    <!--quizFooter: navigation and progress-->
                    <footer class="questionFooter">
                        <!--pagination-->
                        <nav class="pagination" role="navigation" aria-label="pagination">
                            <!-- back button -->
                            <a class="button" v-on:click="prev()" :disabled="questionIndex < 1">Back</a>
                            <!-- next button -->
                            <a class="button" :class="(userResponses[questionIndex]==null)?'':'is-active'" v-on:click="next();" :disabled="questionIndex>=quiz.questions.length">{{ (userResponses[questionIndex]==null)?'Skip':'Next' }}</a>
                        </nav>
                        <!--/pagination-->
                    </footer>
                    <!--/quizFooter-->
                </div>
                <!--/questionContainer-->
                <!--quizCompletedResult-->
                <div v-if="questionIndex >= quiz.questions.length" v-bind:key="questionIndex" class="quizCompleted has-text-centered">
                    <!-- quizCompletedIcon: Achievement Icon -->
                    <span class="icon">
                        <i class="fa" :class="score()>3?'fa-check-circle-o is-active':'fa-times-circle'"></i>
                    </span>

                    <!--resultTitleBlock-->
                    <h2 class="title">
                        You did {{ (score()>7?'an amazing':(score()<4?'a poor':'a good')) }} job!
                    </h2>
                    <p class="subtitle">
                        Total score: {{ score() }} / {{ quiz.questions.length }}
                    </p>
                    <br>
                    <a class="button" @@click="restart()">restart <i class="fa fa-refresh"></i></a>
                    <!--/resultTitleBlock-->
                </div>
                <!--/quizCompetedResult-->
            </transition>
        </div>
        <!--/questionBox-->
    </section>
    <!--/container-->
    <!-- Vue.js library -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
    var quiz = {
        user: "User",
        questions: [
            {
                text: "O que é .NET?",
                responses: [
                    { text: "Um sistema operacional" },
                    { text: "Hyper text transfer protocol" },
                    { text: "Uma estrutura de desenvolvimento de software", correct: true },
                    { text: "Nenhuma das opções acima" }
                ]
            },
            {
                text: "Qual dos seguintes é um componente essencial do .NET Framework?",
                responses: [
                    { text: "Common Language Runtime (CLR)", correct: true },
                    { text: "Java Development Kit (JDK)" },
                    { text: "Python Interpreter" },
                    { text: "HTML5" }
                ]
            },
            {
                text: "Qual linguagem é comumente usada para desenvolver aplicativos no .NET Framework?",
                responses: [
                    { text: "Java" },
                    { text: "C++" },
                    { text: "C#", correct: true },
                    { text: "PHP" }
                ]
            },
            {
                text: "Qual dos seguintes é um ambiente de desenvolvimento integrado (IDE) amplamente utilizado para projetos .NET?",
                responses: [
                    { text: "Eclipse" },
                    { text: "Visual Studio", correct: true },
                    { text: "IntelliJ IDEA" },
                    { text: "Sublime Text" }
                ]
            },
            {
                text: "Qual dos seguintes tipos de aplicativos .NET é adequado para executar em várias plataformas, incluindo Windows, macOS e Linux?",
                responses: [
                    { text: "Aplicativos de Console" },
                    { text: "Aplicativos Windows Forms" },
                    { text: "Aplicativos WPF (Windows Presentation Foundation)" },
                    { text: "Aplicativos .NET Core", correct: true }
                ]
            },
            {
                text: "O que é ASP.NET?",
                responses: [
                    { text: "Uma linguagem de marcação para criar páginas web estáticas" },
                    { text: "Uma estrutura para criar aplicativos web usando C#", correct: true },
                    { text: "Uma ferramenta de edição de imagens" },
                    { text: "Uma biblioteca de jogos em 3D" }
                ]
            },
            {
                text: "Qual dos seguintes é um mecanismo usado no .NET Framework para organizar e gerenciar dados de forma hierárquica?",
                responses: [
                    { text: "Entity Framework", correct: true },
                    { text: "LINQ (Language Integrated Query)" },
                    { text: "ADO.NET (Active Data Objects)" },
                    { text: "ASP.NET Core" }
                ]
            },
            {
                text: "Quais dos seguintes são os principais pilares do .NET Core?",
                responses: [
                    { text: "Common Language Runtime (CLR) e Framework Class Library (FCL)" },
                    { text: "Linguagens de Programação e Compilador Just-In-Time (JIT)" },
                    { text: "Common Language Runtime (CLR) e Biblioteca Unificada (UCL)" },
                    { text: "Linguagens de Programação e Framework Class Library (FCL)", correct: true }
                ]
            },
            {
                text: "O que é o NuGet no ecossistema .NET?",
                responses: [
                    { text: "Um compilador para C#" },
                    { text: "Um repositório de código-fonte aberto" },
                    { text: "Um sistema de controle de versão" },
                    { text: "Um gerenciador de pacotes", correct: true }
                ]
            },
            {
                text: "Qual dos seguintes é um serviço de hospedagem em nuvem da Microsoft para aplicativos .NET?",
                responses: [
                    { text: "Azure App Service", correct: true },
                    { text: "AWS Lambda" },
                    { text: "Google Cloud Platform (GCP)" },
                    { text: "Heroku" }
                ]
            }
        ]
    };
     
        var userResponseSkelaton = Array(quiz.questions.length).fill(null)

        var app = new Vue({
            el: "#app",
            data: {
                quiz: quiz,
                questionIndex: 0,
                userResponses: userResponseSkelaton,
                isActive: false
            },
            filters: {
                charIndex: function (i) {
                    return String.fromCharCode(97 + i);
                }
            },
            methods: {
                restart: function () {
                    this.questionIndex = 0;
                    this.userResponses = Array(this.quiz.questions.length).fill(null);
                },
                selectOption: function (index) {
                    Vue.set(this.userResponses, this.questionIndex, index);
                    //console.log(this.userResponses);
                },
                next: function () {
                    if (this.questionIndex < this.quiz.questions.length)
                        this.questionIndex++;
                },

                prev: function () {
                    if (this.quiz.questions.length > 0) this.questionIndex--;
                },
                score: function () {
                    var score = 0;
                    for (let i = 0; i < this.userResponses.length; i++) {
                        if (
                            typeof this.quiz.questions[i].responses[
                            this.userResponses[i]
                            ] !== "undefined" &&
                            this.quiz.questions[i].responses[this.userResponses[i]].correct
                        ) {
                            score = score + 1;
                        }
                    }

                        axios.post('api/ScoreController', { score: score })
                            .then(response => {
                                console.log("Pontos Salvos!");
                            })
                            .catch(error => {
                                console.error("Erro ao salvar a pontuação:", error);
                            });

                    return score;
                }
            }
        });
    </script>
</body>
</html>
